// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: files.sql

package database

import (
	"context"
)

const createFile = `-- name: CreateFile :exec
INSERT INTO files (path , hash , updatedAt , createdAt, isDir)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?
)ON CONFLICT DO NOTHING
`

type CreateFileParams struct {
	Path      string
	Hash      string
	Updatedat string
	Createdat string
	Isdir     bool
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) error {
	_, err := q.db.ExecContext(ctx, createFile,
		arg.Path,
		arg.Hash,
		arg.Updatedat,
		arg.Createdat,
		arg.Isdir,
	)
	return err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files 
WHERE path = ?
`

func (q *Queries) DeleteFile(ctx context.Context, path string) error {
	_, err := q.db.ExecContext(ctx, deleteFile, path)
	return err
}

const getFile = `-- name: GetFile :one
SELECT path, hash, updatedat, createdat, isdir FROM files
WHERE path = ?
LIMIT 1
`

func (q *Queries) GetFile(ctx context.Context, path string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFile, path)
	var i File
	err := row.Scan(
		&i.Path,
		&i.Hash,
		&i.Updatedat,
		&i.Createdat,
		&i.Isdir,
	)
	return i, err
}

const updateFile = `-- name: UpdateFile :exec
UPDATE files 
SET hash = ?,
updatedAt = ?
WHERE path = ?
`

type UpdateFileParams struct {
	Hash      string
	Updatedat string
	Path      string
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) error {
	_, err := q.db.ExecContext(ctx, updateFile, arg.Hash, arg.Updatedat, arg.Path)
	return err
}
